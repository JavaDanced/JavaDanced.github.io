const e=JSON.parse('{"key":"v-71f16d33","path":"/note/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/completablefuture-intro.html","title":"CompletableFuture 详解","lang":"zh-CN","frontmatter":{"title":"CompletableFuture 详解","category":"Java","tag":["Java并发"],"description":"一个接口可能需要调用 N 个其他服务的接口，这在项目开发中还是挺常见的。举个例子：用户请求获取订单信息，可能需要调用用户信息、商品详情、物流信息、商品推荐等接口，最后再汇总数据统一返回。 如果是串行（按顺序依次执行每个任务）执行的话，接口的响应速度会非常慢。考虑到这些接口之间有大部分都是 无前后顺序关联 的，可以 并行执行 ，就比如说调用获取商品详情的...","head":[["meta",{"property":"og:url","content":"https://javadance.cn/note/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/completablefuture-intro.html"}],["meta",{"property":"og:site_name","content":"企鹅君"}],["meta",{"property":"og:title","content":"CompletableFuture 详解"}],["meta",{"property":"og:description","content":"一个接口可能需要调用 N 个其他服务的接口，这在项目开发中还是挺常见的。举个例子：用户请求获取订单信息，可能需要调用用户信息、商品详情、物流信息、商品推荐等接口，最后再汇总数据统一返回。 如果是串行（按顺序依次执行每个任务）执行的话，接口的响应速度会非常慢。考虑到这些接口之间有大部分都是 无前后顺序关联 的，可以 并行执行 ，就比如说调用获取商品详情的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"企鹅君"}],["meta",{"property":"article:tag","content":"Java并发"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CompletableFuture 详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"企鹅君\\",\\"url\\":\\"https://javadance.cn\\"}]}"]]},"headers":[{"level":2,"title":"Future 介绍","slug":"future-介绍","link":"#future-介绍","children":[]},{"level":2,"title":"CompletableFuture 介绍","slug":"completablefuture-介绍","link":"#completablefuture-介绍","children":[]},{"level":2,"title":"CompletableFuture 常见操作","slug":"completablefuture-常见操作","link":"#completablefuture-常见操作","children":[{"level":3,"title":"创建 CompletableFuture","slug":"创建-completablefuture","link":"#创建-completablefuture","children":[]},{"level":3,"title":"处理异步结算的结果","slug":"处理异步结算的结果","link":"#处理异步结算的结果","children":[]},{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"组合 CompletableFuture","slug":"组合-completablefuture","link":"#组合-completablefuture","children":[]},{"level":3,"title":"并行运行多个 CompletableFuture","slug":"并行运行多个-completablefuture","link":"#并行运行多个-completablefuture","children":[]}]},{"level":2,"title":"CompletableFuture 使用建议","slug":"completablefuture-使用建议","link":"#completablefuture-使用建议","children":[{"level":3,"title":"使用自定义线程池","slug":"使用自定义线程池","link":"#使用自定义线程池","children":[]},{"level":3,"title":"尽量避免使用 get()","slug":"尽量避免使用-get","link":"#尽量避免使用-get","children":[]},{"level":3,"title":"正确进行异常处理","slug":"正确进行异常处理","link":"#正确进行异常处理","children":[]},{"level":3,"title":"合理组合多个异步任务","slug":"合理组合多个异步任务","link":"#合理组合多个异步任务","children":[]}]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.09,"words":4826},"filePathRelative":"note/java/并发编程/completablefuture-intro.md","autoDesc":true,"excerpt":""}');export{e as data};
