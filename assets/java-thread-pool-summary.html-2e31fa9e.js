const e=JSON.parse('{"key":"v-95eca96c","path":"/note/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-thread-pool-summary.html","title":"Java 线程池详解","lang":"zh-CN","frontmatter":{"title":"Java 线程池详解","category":"Java","tag":["Java并发"],"description":"池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 这篇文章我会详细介绍一下线程池的基本概念以及核心原理。 线程池介绍 顾名思义，线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如...","head":[["meta",{"property":"og:url","content":"https://javadance.cn/note/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java-thread-pool-summary.html"}],["meta",{"property":"og:site_name","content":"企鹅君"}],["meta",{"property":"og:title","content":"Java 线程池详解"}],["meta",{"property":"og:description","content":"池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。 这篇文章我会详细介绍一下线程池的基本概念以及核心原理。 线程池介绍 顾名思义，线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"企鹅君"}],["meta",{"property":"article:tag","content":"Java并发"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 线程池详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"企鹅君\\",\\"url\\":\\"https://javadance.cn\\"}]}"]]},"headers":[{"level":2,"title":"线程池介绍","slug":"线程池介绍","link":"#线程池介绍","children":[]},{"level":2,"title":"Executor 框架介绍","slug":"executor-框架介绍","link":"#executor-框架介绍","children":[]},{"level":2,"title":"ThreadPoolExecutor 类介绍（重要）","slug":"threadpoolexecutor-类介绍-重要","link":"#threadpoolexecutor-类介绍-重要","children":[{"level":3,"title":"构造方法介绍","slug":"构造方法介绍","link":"#构造方法介绍","children":[]},{"level":3,"title":"线程池创建两种方式","slug":"线程池创建两种方式","link":"#线程池创建两种方式","children":[]},{"level":3,"title":"线程池常用的阻塞队列总结","slug":"线程池常用的阻塞队列总结","link":"#线程池常用的阻塞队列总结","children":[]}]},{"level":2,"title":"线程池原理分析（重要）","slug":"线程池原理分析-重要","link":"#线程池原理分析-重要","children":[{"level":3,"title":"ThreadPoolExecutor 示例代码","slug":"threadpoolexecutor-示例代码","link":"#threadpoolexecutor-示例代码","children":[]},{"level":3,"title":"线程池原理分析","slug":"线程池原理分析","link":"#线程池原理分析","children":[]},{"level":3,"title":"几个常见的对比","slug":"几个常见的对比","link":"#几个常见的对比","children":[]}]},{"level":2,"title":"几种常见的内置线程池","slug":"几种常见的内置线程池","link":"#几种常见的内置线程池","children":[{"level":3,"title":"FixedThreadPool","slug":"fixedthreadpool","link":"#fixedthreadpool","children":[]},{"level":3,"title":"SingleThreadExecutor","slug":"singlethreadexecutor","link":"#singlethreadexecutor","children":[]},{"level":3,"title":"CachedThreadPool","slug":"cachedthreadpool","link":"#cachedthreadpool","children":[]},{"level":3,"title":"ScheduledThreadPool","slug":"scheduledthreadpool","link":"#scheduledthreadpool","children":[]}]},{"level":2,"title":"线程池最佳实践","slug":"线程池最佳实践","link":"#线程池最佳实践","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":27.76,"words":8327},"filePathRelative":"note/java/并发编程/java-thread-pool-summary.md","autoDesc":true,"excerpt":""}');export{e as data};
